image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "30"
  ANDROID_BUILD_TOOLS: "30.0.3"
  ANDROID_SDK_TOOLS:   "6858069"

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

before_script:
  - export GRADLE_USER_HOME=$(pwd)/.gradle
  - chmod +x ./gradlew
  - apt-get update -qy
  - apt-get -y install zip unzip
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

stages:
  - sonar
  - build
  - uploadapk

sonarscan:
  stage: sonar
  image: node:latest
  variables:
    GIT_DEPTH: 0
  script:
    - apt-get update
    - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - wget -O /tmp/sonar-scanner-cli-4.4.0.2170-linux.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
    - export PATH=$PATH:/root/sonar-scanner-4.4.0.2170-linux/bin
    - base=$(pwd)
    - cd /root
    - unzip /tmp/sonar-scanner-cli-4.4.0.2170-linux.zip
    - cd $base
    - sonar-scanner -Dsonar.host.url=https://sonar.staging.w6d.io -Dsonar.login=dfa1b5fe677559d7546ebc681d68b774fff3575a -Dsonar.projectKey=Sdriver-Android -Dsonar.projectVersion=1.0 -Dsonar.java.binaries=/. -Dsonar.sourceEncoding=UTF-8  -Dsonar.coverage.jacoco.xmlReportPaths=jacoco.xml


assembleDebug:
  stage: build
  script:
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs

.uploadingartefact:
  stage: uploadapk
  script:
    #- echo "Zipping the artefact"
    #- zip -r artefact.zip app/build/outputs
    #- echo "Check for the existance of the APK"
    #- ls -al | grep "artefact.zip"
    - APK_NAME=$(ls app/build/outputs/apk/debug/*.apk)
    - echo "Sending APK to nexus ${NEXUS_REPOSITORY}"
    - curl --upload-file $APK_NAME -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -v ${NEXUS_REPOSITORY}

uploadingartefact:develop:
  extends: .uploadingartefact
  environment:
    name: develop
  only:
    - develop
    - branches
  except:
    - staging
    - qualif
    - master

uploadingartefact:staging:
  extends: .uploadingartefact
  environment:
    name: staging
  only:
    - staging

uploadingartefact:qualif:
  extends: .uploadingartefact
  environment:
    name: qualif
  only:
    - qualif

uploadingartefact:master:
  extends: .uploadingartefact
  environment:
    name: master
  only:
    - master
